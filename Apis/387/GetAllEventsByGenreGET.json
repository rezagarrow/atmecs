{
  "Name": "GetAllEventsByGenre",
  "HttpMethod": "GET",
  "IsEnabled": true,
  "OrderIndex": 0,
  "CrossDomainPolicy": "Public",
  "Inputs": [
    {
      "Name": "genreId",
      "IsDeleted": false,
      "IsEnabled": true,
      "OrderIndex": 0,
      "Parameters": {
        "Value": ""
      },
      "InputTypeStr": "text",
      "Validations": [
        {
          "Data": "{\"Message\":\"{FieldName} is required\"}",
          "Type": "default-required",
          "IsDeleted": false,
          "IsEnabled": false,
          "OrderIndex": 0,
          "Metadata": {}
        }
      ]
    },
    {
      "Name": "keyword",
      "IsDeleted": false,
      "IsEnabled": true,
      "OrderIndex": 1,
      "Parameters": {
        "Value": ""
      },
      "InputTypeStr": "text",
      "Validations": []
    }
  ],
  "Actions": [
    {
      "ActionType": "PostData",
      "OrderIndex": 0,
      "Parameters": {
        "InputParameters": "",
        "URL": "https://app.ticketmaster.com/discovery/v2/events.json?apikey=[Auth:ApiKey]&genreId=[genreId]&keyword=[keyword]",
        "UrlTokenContext": {
          "Expression": "",
          "Value": "Url",
          "IsExpression": false,
          "Parameters": {}
        },
        "UseSSL": "",
        "Timeout": "",
        "HttpMethod": {
          "Expression": "",
          "Value": "GET",
          "IsExpression": false,
          "Parameters": {}
        },
        "Data": "",
        "DoNotEscapeTokens": "",
        "DisableReferer": "",
        "Headers": [
          {
            "value": "application/json",
            "name": "Content-Type"
          }
        ],
        "UseDNNProxySettings": "",
        "AddCurrentCookies": "",
        "OutputParameters": "",
        "CookieContainerToken": "",
        "OutputTokenName": "Result",
        "OutputHeaders": "",
        "IgnoreErrors": "",
        "Events": "",
        "OnError": []
      },
      "IsEnabled": true,
      "ExecutionType": "OnExecute",
      "Metadata": {}
    },
    {
      "ActionType": "ExecuteJavascript",
      "OrderIndex": 1,
      "Condition": "",
      "Parameters": {
        "ScriptName": "addObjectproperty",
        "LocalVariables": "",
        "Code": "var jsonObj=JSON.parse(Result);\n\nif (jsonObj.hasOwnProperty(\"_embedded\") == false){\njsonObj._embedded = {\n        \"events\": [{\n            \"name\": \"No Events Available\",\n            \"type\": \"event\",\n            \"id\": \"-1\",\n            \"test\": false,\n            \"url\": \"\",\n            \"locale\": \"en-us\",\n         \"dates\": {\n                \"start\": {\n                    \"localDate\": \"2021-06-05\",\n                    \"dateTBD\": false,\n                    \"dateTBA\": false,\n                    \"timeTBA\": true,\n                    \"noSpecificTime\": false\n                },\n                \"timezone\": \"Europe/Berlin\",\n                \"status\": {\n                    \"code\": \"rescheduled\"\n                },\n                \"spanMultipleDays\": false\n            },\n \"classifications\": [{\n                \"primary\": true,\n                \"segment\": {\n                    \"id\": \"N/A\",\n                    \"name\": \"N/A\"\n                },\n                \"genre\": {\n                    \"id\": \"N/A\",\n                    \"name\": \"N/A\"\n                },\n                \"subGenre\": {\n                    \"id\": \"N/A\",\n                    \"name\": \"N/A\"\n                },\n                \"family\": false\n            },\n            \"images\": [{\n                \"ratio\": \"3_2\",\n                \"url\": \"https://www.staticwhich.co.uk/static/images/products/no-image/no-image-available.png\",\n                \"width\": 1024,\n                \"height\": 683,\n                \"fallback\": true\n            }]}]};\n}\n\nvar response = jsonObj._embedded.events.map(function(data){\nvar parseData = {};\nparseData.id=  data.id\nparseData.name =  data.name\nparseData.description = data.description\nparseData.mainImage = data.images.filter(obj => {return obj.width = 1024})[0].url;\nparseData.localDate = new Date(data.dates.start.localDate).toLocaleDateString() ?? 'TBD'\nparseData.localTime = data.dates.start.localTime ?? 'TBD'\nparseData.segment = data.classifications.map(function(o){return o.segment.name + ' (' + o.genre.name + ', ' + o.subGenre.name +')'}).join()\n\nreturn parseData;\n})\nreturn JSON.stringify(response );",
        "OutputTokenName": "newObject",
        "OnError": []
      },
      "IsEnabled": true,
      "ExecutionType": "OnExecute",
      "Metadata": {}
    },
    {
      "ActionType": "RawResponse",
      "OrderIndex": 2,
      "Parameters": {
        "Content": "[newObject]",
        "HttpCode": "200 OK",
        "Headers": [
          {
            "value": "application/json",
            "name": "Content-Type"
          }
        ]
      },
      "IsEnabled": true,
      "ExecutionType": "OnExecute",
      "Metadata": {}
    }
  ],
  "OnErrorActions": []
}